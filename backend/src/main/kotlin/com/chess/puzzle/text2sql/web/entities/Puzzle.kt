package com.chess.puzzle.text2sql.web.entities

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table

/**
 * Represents a Lichess Chess Puzzle in the system.
 *
 * This class contains information about the chess puzzle, including its unique ID, FEN notation,
 * and solution moves. It is created by using Lichess Chess Puzzle's format. See additional
 * information at [lichess.org](https://database.lichess.org/#puzzles).
 */
@Entity
@Table(name = "t_puzzle")
data class Puzzle(
    /**
     * The id of the chess puzzle.
     *
     * This property is used to store the unique id of each chess puzzle.
     */
    @Id @Column(name = "id") val id: Int,
    /**
     * The puzzle id of the chess puzzle.
     *
     * Puzzle id was generated by Lichess. This property is currently unused but is kept for
     * alignment with the database schema.
     */
    @Column(name = "puzzle_id") val puzzleId: String,
    /**
     * The Forsyth-Edwards Notation (fen) of the chess puzzle.
     *
     * Forsyth-Edwards Notation are used to describe the particular board position of a chess game.
     * In this web application, FEN is the position before the opponent makes their move. The
     * position to present to the player is after applying the first move to that FEN. The second
     * move is the beginning of the solution of the chess puzzle.
     *
     * @sample "q3k1nr/1pp1nQpp/3p4/1P2p3/4P3/B1PP1b2/B5PP/5K2 b k - 0 17"
     * @see [FEN notation](https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation) for more
     *   details.
     */
    @Column(name = "fen") val fen: String,
    /**
     * The moves in UCI format of the chess puzzle.
     *
     * UCI (Universal Chess Interface) format is a standard notation for representing chess moves.
     *
     * All player moves of the solution are "only moves". I.e. playing any other move would
     * considerably worsen the player position. An exception is made for mates in one: there can be
     * several. Any move that checkmates should win the puzzle.
     */
    @Column(name = "moves") val moves: String,
    /**
     * The difficulty rating of the chess puzzle.
     *
     * It is based on the elo system. It ranges from 0 to about 3500
     *
     * @sample "e8d7 a2e6 d7d8 f7f8"
     */
    @Column(name = "rating") val rating: Int,
    /**
     * The difficulty raiting deviation of the chess puzzle.
     *
     * This property is currently unused but is kept for alignment with the database schema.
     */
    @Column(name = "rating_deviation") val ratingDeviation: Int,
    /**
     * The popularity of the chess puzzle.
     *
     * Popularity is a number between 100 (best) and -100 (worst).
     */
    @Column(name = "popularity") val popularity: Int,
    /**
     * The number of plays of the chess puzzle.
     *
     * This property is currently unused but is kept for alignment with the database schema.
     */
    @Column(name = "nb_plays") val nbPlays: Int,
    /**
     * The themes of the chess puzzle.
     *
     * It is a string which may contains multiple themes where each theme are separated by a space.
     * Each theme follows camelCase. Algebra are used to represent numbers.
     *
     * @sample "mate mateIn2 middlegame short"
     */
    @Column(name = "themes") val themes: String,
    /**
     * The url to the lichess.org of the chess puzzle.
     *
     * It is a https link.
     */
    @Column(name = "game_url") val gameUrl: String,
    /**
     * The opening tags of the chess puzzle.
     *
     * The opening tag field is only set for puzzles starting before move 20. If the puzzle does not
     * have, the string is empty. It is a string which may contains multiple tags where each tags
     * are separated by a space. Each tags follows a Pascal_Snake_Case. Apostrophe are removed.
     *
     * @sample "Queens_Gambit Queens_Gambit_Declined"
     */
    @Column(name = "opening_tags") val openingTags: String,
)
